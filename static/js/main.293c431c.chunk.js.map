{"version":3,"sources":["components/WeatherImage.js","components/WeatherCard.js","pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherImage","weatherType","icon","faCloud","faSun","faCloudRain","faBolt","faSnowflake","WeatherCard","cloudiness","currentTemp","highTemp","humidity","lowTemp","windSpeed","className","style","backgroundColor","daysOfWeek","monthsOfYear","Home","useState","city","setCity","weatherData","setWeatherData","query","URLSearchParams","useLocation","search","useEffect","cityValue","get","console","log","axios","then","response","data","catch","error","warn","useMemo","clouds","all","Math","round","main","temp","temp_max","temp_min","weather","wind","speed","currentDate","Date","todayIndex","getDay","monthIndex","getMonth","UTCDATE","getUTCDate","href","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.293c431c.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCloud, faSun, faSnowflake, faCloudRain, faBolt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction WeatherImage({ weatherType }){\r\n    switch(weatherType){\r\n        case 'Clouds':\r\n            return <FontAwesomeIcon icon={faCloud} />\r\n        case 'Clear':\r\n            return <FontAwesomeIcon icon={faSun} />\r\n        case 'Rain':\r\n            return <FontAwesomeIcon icon={faCloudRain} />\r\n        case 'Thunderstorms':\r\n            return <FontAwesomeIcon icon={faBolt} />\r\n        case 'Snow':\r\n            return <FontAwesomeIcon icon={faSnowflake} />\r\n        default:\r\n            return <FontAwesomeIcon icon={faBolt} />\r\n    }\r\n}\r\n\r\nexport default WeatherImage;","import React from 'react';\r\nimport WeatherImage from './WeatherImage';\r\n\r\nfunction WeatherCard({\r\n    cloudiness,\r\n    currentTemp,\r\n    highTemp,\r\n    humidity,\r\n    lowTemp,\r\n    weatherType,\r\n    windSpeed\r\n}) {\r\n    return (\r\n        <section \r\n            className=\"WeatherCard\" \r\n            style={{\r\n            backgroundColor: `rgba(150, 150, 150, ${cloudiness/100})`,\r\n        }}>\r\n            <div className=\"CurrentTemperatureWrapper\">\r\n                <div className='WeatherImageWrapper'>\r\n                    <WeatherImage weatherType={weatherType} />\r\n                </div>\r\n                <p className=\"CurrentTemp\">{currentTemp}°</p>\r\n                <div className='underImage'>\r\n                    <p className=\"weatherType\"><strong>{weatherType}</strong></p>\r\n                    <div className='highandlow'>\r\n                        <p>H: <strong>{highTemp}°</strong></p>\r\n                        <p>L: <strong>{lowTemp}°</strong></p>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"weatherInfoWrapper\">\r\n                <p className=\"weatherInfo\">\r\n                    Cloudiness: <strong>{cloudiness}%</strong>\r\n                </p>\r\n                <p className=\"weatherInfo\">\r\n                    Humidity: <strong>{humidity}%</strong>\r\n                </p>\r\n                <p className=\"weatherInfo\">\r\n                    Wind Speed: <strong>{windSpeed} mph</strong>\r\n                </p>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default WeatherCard;","import React, { useEffect, useMemo, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport WeatherCard from '../components/WeatherCard';\r\n\r\nconst API_KEY = '3c31f3fe1b1bf0986490dfc5c2cb9af8';\r\n\r\n//URL Search Params...\r\n//google.com/?city=paris\r\nfunction useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nconst daysOfWeek = [\r\n    'Sunday',\r\n    'Monday',\r\n    'Tuesday',\r\n    'Wednesday',\r\n    'Thursday',\r\n    'Friday',\r\n    'Saturday'\r\n]\r\n\r\nconst monthsOfYear = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December'\r\n]\r\n\r\nfunction Home(){\r\n    const [city, setCity] = useState();\r\n    const [weatherData, setWeatherData] = useState();\r\n\r\n    let query = useQuery();\r\n\r\n    useEffect(() => {\r\n        const cityValue = query.get(\"city\");\r\n        setCity(cityValue);\r\n    }, [query]);\r\n\r\n    useEffect(() => {\r\n        if (city) {\r\n        console.log(city)\r\n        axios\r\n            .get(\r\n                `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=imperial`\r\n            )\r\n            .then(function (response) {\r\n                //handle success\r\n                setWeatherData(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                //handle error\r\n                console.warn(error);\r\n            });\r\n        }\r\n    }, [city]);\r\n    \r\n\r\n    const { \r\n        cloudiness, \r\n        currentTemp, \r\n        highTemp, \r\n        humidity, \r\n        lowTemp, \r\n        weatherType, \r\n        windSpeed,\r\n    } = useMemo(() => {\r\n        if (!weatherData) return {};\r\n        return {\r\n            cloudiness: weatherData.clouds.all,\r\n            currentTemp: Math.round(weatherData.main.temp),\r\n            highTemp: Math.round(weatherData.main.temp_max),\r\n            humidity: weatherData.main.humidity,\r\n            lowTemp: Math.round(weatherData.main.temp_min),\r\n            weatherType: weatherData.weather[0].main,\r\n            windSpeed: weatherData.wind.speed\r\n        }; \r\n    }, [weatherData]);\r\n\r\n    const currentDate = new Date();\r\n    const todayIndex = currentDate.getDay();\r\n    const monthIndex = currentDate.getMonth();\r\n    const UTCDATE = currentDate.getUTCDate();\r\n\r\n    return (\r\n        <main className=\"App\">\r\n            <header>\r\n                <nav className=\"Navigation\">\r\n                    <a href='/?city=Paris' className={city === 'Paris' && 'Active'}>Paris</a>\r\n                    <a href='/?city=Tokyo' className={city === 'Tokyo' && 'Active'}>Tokyo</a>\r\n                    <a href='/?city=Tel Aviv' className={city === 'Tel Aviv' && 'Active'}>Tel Aviv</a>\r\n                    <a href='/?city=New York' className={city === 'New York' && 'Active'}>New York</a>\r\n                </nav>\r\n            </header>\r\n            <h1 className=\"CityTitle\">{city}</h1>\r\n            <h2>{daysOfWeek[todayIndex] + ' ' + monthsOfYear[monthIndex] + ' ' + UTCDATE}</h2>\r\n            <WeatherCard \r\n                cloudiness={cloudiness}\r\n                currentTemp={currentTemp}\r\n                highTemp={highTemp}\r\n                humidity={humidity}\r\n                lowTemp={lowTemp}\r\n                weatherType={weatherType}\r\n                windSpeed={windSpeed}\r\n            />\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n\r\n","import './App.css';\nimport Home from './pages/Home';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}